% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chi_chars_ccs.R
\name{chi_chars_ccs}
\alias{chi_chars_ccs}
\title{Generate CHI CHARS counts by CCS category}
\usage{
chi_chars_ccs(
  ph.indicator = NA,
  ph.data = NULL,
  myinstructions = NULL,
  chars.defs = NULL
)
}
\arguments{
\item{ph.indicator}{A character string of length 1. The indicator key to process,
which must exist in the chars.defs data table.}

\item{ph.data}{A data.table containing the CHARS data to be processed.}

\item{myinstructions}{A data.table containing processing instructions for each indicator.
Default is the output from chi_generate_tro_shell().}

\item{chars.defs}{A data.table containing definitions for each indicator. It
should have the following columns: `indicator_name`, `indicator_key`, `intent`,
`mechanism`, `superlevel`, `broad`, `midlevel`, `detailed`, `age_start`, and
`age_end`.}
}
\value{
A data.table containing the summarized CHARS hospitalization data for the
        specified indicator, stratified by the requested demographic variables.
}
\description{
Generate hospitalization counts from Comprehensive Hospital Abstract Reporting
System (CHARS) data based on Clinical Classification Software (CCS) categories
for CHI. This function processes instructions for specific indicators and
summarizes CHARS data accordingly. It automatically handles the ICD-9 to ICD-10
transition that occurred in 2016.
}
\details{
The function processes multiple instructions for the same indicator sequentially.

The function automatically detects whether data spans the ICD-9 to ICD-10 transition in 2016
and processes each part with the appropriate ICD version. Results are then combined seamlessly.
}
\examples{
\dontrun{
# Example of how to run with future_lapply for memory efficiency
library(future)
library(future.apply)

plan(multisession, workers = future::availableCores() - 1)

countsCCS <- rbindlist(future_lapply(VectorOfIndicators, function(indicator) {
  chi_chars_ccs(
    ph.indicator = indicator,
    ph.data = chars,
    myinstructions = myinstructions,
    chars.defs = chars.defs)
}, future.seed = TRUE))

plan(sequential)

}

}
\seealso{
\code{\link[rads]{get_data_chars}}, which provides creates ph.data

\code{\link[rads]{chars_icd_ccs_count}}, which is the engine used by this function

\code{\link{chi_generate_tro_shell}}, which creates myinstructions
}
